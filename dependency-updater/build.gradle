/* TODO:

 * update maven pom.xml in bamboo + maven deployit plugin, jenkins plugin (?)
 * check consistency of dependencies.conf

*/

buildscript {
  repositories { mavenCentral() }
  dependencies {
    classpath 'com.typesafe:config:1.2.0'
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
  }
}

ext {
  mainProjectData = [
      'plugin-api'     : 'git@github.com:xebialabs/plugin-api.git',
      'engine'         : 'git@github.com:xebialabs/engine.git',
      'bundled-plugins': 'git@github.com:xebialabs/bundled-plugins.git',
      'cloud-pack'     : 'git@github.com:xebialabs/cloud-pack.git',
      'deployit'       : 'git@github.com:xebialabs/deployit.git',
  ]
  ciPluginProjectData = [
      'bamboo-deployit-plugin': 'git@github.com:xebialabs/bamboo-deployit-plugin.git',
  ]
  middleWarePluginProjectData = [
      'tomcat-plugin'      : 'git@github.com:xebialabs/tomcat-plugin.git',
      'glassfish-plugin'   : 'git@github.com:xebialabs/glassfish-plugin.git',

      'jbossas-plugin'     : 'git@github.com:xebialabs/jbossas-plugin.git',
      'jbossdm-plugin'     : 'git@github.com:xebialabs/jbossdm-plugin.git',

      'loadbalancer-plugin': 'git@github.com:xebialabs/loadbalancer-plugin.git',

      'websphere-plugins'  : 'git@github.com:xebialabs/websphere-plugins.git',

      'windows-plugin'     : 'git@github.com:xebialabs/windows-plugin.git',
      'iis-plugin'         : 'git@github.com:xebialabs/iis-plugin.git',

      'weblogic-plugins'   : 'git@github.com:xebialabs/weblogic-plugins',
  ]
  pluginProjectData = ciPluginProjectData + middleWarePluginProjectData
  projectData = mainProjectData + pluginProjectData
  // Test repository: + [ 'temp4test' : 'git@github.com:xebialabs/temp4test.git' ]

  // plugins that use maven to build
  mavenPluginProjectData = [
      'maven-deployit-plugin' : 'git@github.com:xebialabs/maven-deployit-plugin.git',
      'bamboo-deployit-plugin': 'git@github.com:xebialabs/bamboo-deployit-plugin.git',
  ]
  versionProperties = ['apiVersion',
                       'licenseDatabaseVersion',
                       'bundledPluginsVersion',
                       'cloudPackVersion',
                       'docBaseStyleVersion',
                       'engineVersion',
                       'overthereVersion',
                       'overcastVersion']
  propToProject = ['apiVersion'            : 'plugin-api',
                   'licenseDatabaseVersion': 'license-database',
                   'bundledPluginsVersion' : 'bundled-plugins',
                   'cloudPackVersion'      : 'cloud-pack',
                   'docBaseStyleVersion'   : 'doc-base-style',
                   'engineVersion'         : 'engine',
                   'overthereVersion'      : 'overthere',
                   'overcastVersion'       : 'overcast']
}

description = """
Use this gradle build to update the gradle/dependencies.conf and/or gradle
distribution URL's across many projects.

You can do single updates or update groups of projects.

Supported properties:
    ${versionProperties.join(',\n    ')}

If a property is not present in the dependencies.conf it will not be
added/updated.

So to update all XL Deploy dependencies:

    gradle groupUpdateXlDeployDependencies \\
      -PapiVersion=5.0.1 \\
      -PengineVersion=5.0.1 \\
      -Pbranch=master

Or using task abbreviations:

    gradle gUXD -PapiVersion=5.0.1 -PengineVersion=5.0.1  -Pbranch=master

To update only the jenkins deployit plugin:

    gradle updateJenkinsDeployitPluginDependencies -PapiVersion=5.0.1 -Pbranch=master

To specify the branch you want to update use -Pbranch=<branch>. There is no
default by design.

    gradle groupUpdateXlDeployDependencies \\
      -PoverthereVersion=2.4.1 \\
      -Pbranch=4.0.x-maintenance

To update gradle wrappers use the update<plugin>Gradle or
groupUpdate<group>Gradle tasks with an additional property
'gradleDistributionUrl'. For instance:

    gradle groupUpdateXlDeployGradle \\
        -PgradleDistributionUrl=http://tech.xebialabs.com/xebialabs-gradle/xebialabs-gradle-1.11-1.2.18-bin.zip \\
        -Pbranch=master

Authentication

To authenticate generate a oauth token for your github account and give
it access to private repositories.

Put the token in your private gradle.properties with key

    githubOauthToken=<yourkey>

"""

def projectName(def name) {
  def parts = name.split('-')
  parts*.capitalize().join()
}

def updateProjectDependencyTaskName(def name) {
  "update${projectName(name)}Dependencies"
}

def updateProjectGradleTaskName(def name) {
  "update${projectName(name)}Gradle"
}

import com.typesafe.config.ConfigFactory
import com.typesafe.config.ConfigValue
import com.typesafe.config.ConfigValueType
import com.typesafe.config.ConfigRenderOptions
import com.typesafe.config.ConfigValueFactory
import com.typesafe.config.ConfigParseOptions

projectData.each { repoName, metadata ->
  task "${updateProjectDependencyTaskName(repoName)}"(type: UpdateGithubFile) {
    group = "Single project update"

    organization = 'xebialabs'
    repository = repoName
    contentPath = 'gradle/dependencies.conf'
    branch = { -> project.getProperty('branch') }
    username = githubOauthToken
    password = 'x-oauth-basic'

    doUpdate { content ->
      def cfg = ConfigFactory.parseString(content, ConfigParseOptions.defaults().setOriginDescription("Github project ${name} branch $branch gradle/dependencies.conf"))
      def updates = [:]
      def updatedToList = []

      versionProperties.each {
        def key = "xebialabs.dependencies.versions.${it}"
        if (project.hasProperty(it)) {
          def version = project.getProperty(it)
          if (cfg.hasPath(key)) {
            def currentVersion = cfg.getString(key)
            if (!version.equals(currentVersion)) {
              logger.info("Updating $it $currentVersion -> $version")
              updates[key] = version
              updatedToList += "${propToProject[it]}-$version"
            } else {
              logger.debug("Not updating $it no change")
            }
          }
        }
      }

      def newCfg = ConfigFactory.parseMap(updates, "updated values")
      cfg = newCfg.withFallback(cfg)

      def rendered = cfg.root().render(ConfigRenderOptions.defaults().setOriginComments(false).setJson(false))

      if (updatedToList.size() > 0) {
        return [content: rendered, message: updatedToList.join(', ')]
      } else {
        return [:]
      }
    }
  }

  task "${updateProjectGradleTaskName(repoName)}"(type: UpdateGithubFile) {
    group = "Single project Gradle Wrapper Update"

    organization = 'xebialabs'
    repository = repoName
    contentPath = 'gradle/wrapper/gradle-wrapper.properties'
    branch = { -> project.getProperty('branch') }
    username = githubOauthToken
    password = 'x-oauth-basic'

    doUpdate { content ->
      if (project.hasProperty('gradleDistributionUrl')) {
        def url = project.getProperty('gradleDistributionUrl')

        Properties props = new Properties();
        props.load(new StringReader(content))
        def currentUrl = props['distributionUrl']

        if (!url.equals(currentUrl)) {
          logger.info("Updating gradle distribution $currentUrl -> $url")
          props['distributionUrl'] = url
          def newContent = new StringWriter()
          props.store(newContent, null)
          String gradleZip = url.substring(url.lastIndexOf('/') + 1).replace('-bin.zip', '')
          return [content: newContent.toString(), message: gradleZip]
        } else {
          logger.debug("Not updating gradle distributionUrl no change (${currentUrl})")
        }
      } else {
        throw new RuntimeException("Property gradleDistributionUrl not set, don't know which gradle to update to.")
      }

      return [:]
    }
  }
}

///// Dependency group update tasks

def nextLine = ',\n    '
task groupUpdateXlDeployDependencies(dependsOn: mainProjectData.keySet().collect { "${updateProjectDependencyTaskName(it)}" }) {
  group "Group update"
  description = "Update ${mainProjectData.keySet().join(nextLine)}"
}

task groupUpdateCiPluginDependencies(dependsOn: ciPluginProjectData.keySet().collect { "${updateProjectDependencyTaskName(it)}" }) {
  group "Group update"
  description = "Update ${ciPluginProjectData.keySet().join(nextLine)}"
}

task groupUpdateMiddleWarePluginDependencies(dependsOn: middleWarePluginProjectData.keySet().collect { "${updateProjectDependencyTaskName(it)}" }) {
  group "Group update"
  description = "Update ${middleWarePluginProjectData.keySet().join(nextLine)}"
}

task groupUpdatePluginDependencies(dependsOn: pluginProjectData.keySet().collect { "${updateProjectDependencyTaskName(it)}" }) {
  group "Group update"
  description = "Update ${pluginProjectData.keySet().join(nextLine)}"
}

task groupUpdateAllDependencies(dependsOn: projectData.keySet().collect { "${updateProjectDependencyTaskName(it)}" }) {
  group "Group update"
  description = "Update ${projectData.keySet().join(nextLine)}"
}

///// Gradle group update tasks

task groupUpdateXlDeployGradle(dependsOn: mainProjectData.keySet().collect { "${updateProjectGradleTaskName(it)}" }) {
  group "Group gradle update"
  description = "Update ${mainProjectData.keySet().join(nextLine)}"
}

task groupUpdatePluginGradle(dependsOn: pluginProjectData.keySet().collect { "${updateProjectGradleTaskName(it)}" }) {
  group "Group gradle update"
  description = "Update ${pluginProjectData.keySet().join(nextLine)}"
}

task groupUpdateAllGradle(dependsOn: projectData.keySet().collect { "${updateProjectGradleTaskName(it)}" }) {
  group "Group gradle update"
  description = "Update ${projectData.keySet().join(nextLine)}"
}

////// Check targets

def getGradleVersionFromUrl(def url) {
  def start = url.lastIndexOf('/') + 1
  def end = url.lastIndexOf('-bin.zip')
  if (start == -1) {
    start = 0
  }
  if (end == -1) {
    end = url.length()
  }
  url.substring(start, end)
}

task checkGradleWrappers(type: CheckGithubFile) {
  group = "Check that gradle wrappers are the same across projects"

  organization = 'xebialabs'
  repositories = projectData.keySet()
  contentPath = 'gradle/wrapper/gradle-wrapper.properties'
  branch = { -> project.getProperty('branch') }
  username = githubOauthToken
  password = 'x-oauth-basic'

  def nonMatching = []
  def previousUrl = null
  check { repository, content ->
    logger.debug("Checking $repository...")
    Properties props = new Properties();
    props.load(new StringReader(content))
    def currentUrl = props['distributionUrl']
    if (previousUrl == null) {
      previousUrl = currentUrl;
    } else {
      if (!currentUrl.equals(previousUrl)) {
        nonMatching += [[repository, previousUrl, currentUrl]]
      }
    }
  }
  doLast {
    if (nonMatching.size() > 0) {
      nonMatching.each { repo, goodUrl, url ->
        println "$repo gradle version is ${getGradleVersionFromUrl(url)} not ${getGradleVersionFromUrl(goodUrl)}"
      }
      throw new RuntimeException("Gradle wrapper not up to date across projects!")
    }
  }
}


task checkVersions(type: CheckGithubFile) {
  group = "Check that gradle wrappers are the same across projects"

  organization = 'xebialabs'
  repositories = projectData.keySet()
  contentPath = 'gradle/dependencies.conf'
  branch = { -> project.getProperty('branch') }
  username = githubOauthToken
  password = 'x-oauth-basic'

  def nonMatching = []
  def previousCfg = null
  check { repository, content ->
    //logger.info("Content = $content")

    def cfg = ConfigFactory.parseString(content, ConfigParseOptions.defaults().setOriginDescription("Github project ${repository} branch $branch gradle/dependencies.conf"))
    if (previousCfg == null) {
      previousCfg = cfg
    } else {
      cfg.entrySet().each { Map.Entry<String, ConfigValue> entry ->
        def key = entry.getKey()
        def value = null
        if (entry.getValue().valueType() == ConfigValueType.STRING) {
          value = cfg.getString(key)
        } else if (entry.getValue().valueType() == ConfigValueType.NUMBER) {
          value = cfg.getNumber(key).toString()
        } else {
          throw new RuntimeException("$repository gradle/dependencies.conf $key has unsupported type ${entry.getValue().valueType()}");
        }

        if (previousCfg.hasPath(key)) {
          def previousValue = previousCfg.getString(key)
          if (!previousValue.equals(value)) {
            nonMatching += [[repository, key, previousValue, value]]
          }
        }
      }
    }
  }
  doLast {
    if (nonMatching.size() > 0) {
      nonMatching.each { repo, key, prevValue, value ->
        println "Repository $repo $key $prevValue != $value"
      }
    }
  }
}

import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.JSON
import org.apache.http.*
import org.apache.http.protocol.*
import org.apache.http.auth.*

class UpdateGithubFile extends DefaultTask {
  String organization
  String repository
  String contentPath
  def branch

  String username
  String password

  Closure doUpdate

  @TaskAction
  def update() {
    // set auth header manually else it doesn't work
    def userPassBase64 = "${username}:${password}".toString().bytes.encodeBase64()
    def github = new RESTClient("https://api.github.com/").with {
      contentType = JSON
      defaultRequestHeaders.'Authorization' = "Basic $userPassBase64"
      defaultRequestHeaders.'Accept' = 'application/vnd.github.v3+json'
      // will not work without User-Agent!
      defaultRequestHeaders.'User-Agent' = 'UpdateGithubTask'
      handler.failure = { resp ->
        throw new RuntimeException("GitHub API Failure: ${resp.statusLine}")
      }
      delegate
    }
    def url = "/repos/$organization/$repository/contents/$contentPath"
    def response = github.get(path: url, query: ['ref': "${branch}"])
    def content = new String(response.data.content.decodeBase64(), 'UTF-8');
    def sha = response.data.sha
    logger.debug("Loaded from '{}': '{}'", url, content)

    def updateMap = doUpdate content
    if (updateMap.size() > 0) {
      logger.debug("Updating with {}", updateMap)

      def body = ['content': updateMap.content.bytes.encodeBase64().toString(), 'message': updateMap.message.toString(), 'sha': sha, 'branch': "${branch}"]
      logger.debug("Update request body: {}", body)
      def putResponse = github.put(path: url, 'body': body)
      logger.debug("Update response: {}", putResponse.data)
    } else {
      logger.debug("No update to do.")
    }
  }
}

class CheckGithubFile extends DefaultTask {
  String organization
  String contentPath
  def branch
  def repositories = []

  String username
  String password

  Closure check

  @TaskAction
  def check() {
    // set auth header manually else it doesn't work
    def userPassBase64 = "${username}:${password}".toString().bytes.encodeBase64()
    def github = new RESTClient("https://api.github.com/").with {
      contentType = JSON
      defaultRequestHeaders.'Authorization' = "Basic $userPassBase64"
      defaultRequestHeaders.'Accept' = 'application/vnd.github.v3+json'
      // will not work without User-Agent!
      defaultRequestHeaders.'User-Agent' = 'UpdateGithubTask'
      handler.failure = { resp ->
        throw new RuntimeException("GitHub API Failure: ${resp.statusLine}")
      }
      delegate
    }
    repositories.each { repository ->
      def url = "/repos/$organization/$repository/contents/$contentPath"
      def content = ""
      try {
        def response = github.get(path: url, query: ['ref': "${branch}"])
        content = new String(response.data.content.decodeBase64(), 'UTF-8');
        def sha = response.data.sha
        logger.debug("Loaded from '{}': '{}'", url, content)
      } catch (RuntimeException e) {
        throw new RuntimeException("Failed to read from repository $repository ($branch)", e)
      }

      check repository, content
    }
  }
}
