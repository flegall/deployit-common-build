project.ext {
    commonBuildPath = hasProperty("localCommonBuildRepo") ? file(localCommonBuildRepo).toURL().toString() : 'https://github.com/xebialabs/deployit-common-build/raw/master'

    docTempDir = file("${buildDir}/doc")
    docCommonUrl = "${commonBuildPath}/documentation/generation"

    pdfGenerationEnabled = hasProperty("pdfGenerationEnabled") ? pdfGenerationEnabled : true
    pdfCover = "$docCommonUrl/pdfCover.html"
    pdfFooter = "$docCommonUrl/pdfPageFooter.html"
    pdfHeader = "$docCommonUrl/pdfPageHeader.html"
    pdfTocXsl = "$docCommonUrl/pdfToc.xsl"
    htmlHeader = "$docCommonUrl/htmlHeader.html"
    docResources = ["$docCommonUrl/css.zip", "$docCommonUrl/image.zip", "$docCommonUrl/js.zip"]
    resolvedMarkdownSources = hasProperty('markdownSources') ? markdownSources : '*.markdown'
    resolvedWkhtmltopdf= hasProperty("wkhtmltopdf") ? wkhtmltopdf : 'wkhtmltopdf'
    resolvedDocArchiveClassifier = hasProperty("docArchiveClassifier") ? docArchiveClassifier : 'doc'
    resolvedDocArchiveExludes = hasProperty("docArchiveExcludes") ? docArchiveExcludes : [ ]
}

configurations {
    docgen
	docgenerator
}

task documentationZip(type: Zip, dependsOn: ['doGenerateDocumentation']) {
    classifier = "$resolvedDocArchiveClassifier"
    exclude '*.markdown'
    exclude '*.properties'
    into("pdf") {
        from docTempDir
        include '*.pdf'
        if (resolvedDocArchiveExludes) {
            exclude resolvedDocArchiveExludes
        }
    }
    into("html") {
        from docTempDir
        exclude '*.pdf'
        if (resolvedDocArchiveExludes) {
            exclude resolvedDocArchiveExludes
        }
    }
    into(""){
	from projectDir
	include '*.txt'
	if (resolvedDocArchiveExludes) {
            exclude resolvedDocArchiveExludes
        }
    }
}

artifacts {
    archives documentationZip
}

task cleanDoc(type: Delete) {
    delete "$docTempDir"
}

task doGenerateDocumentation(dependsOn: configurations.docgen) {
    // Changed in code (Java CI's) and resources (synthetic.xml) should result in an updated CI reference section
    inputs.dir "${projectDir}/src/main"
    outputs.dir docTempDir

    configurations.docgen.getDependencies().withType(ProjectDependency).each {
        inputs.dir = "${docProject.projectDir}/src/main"
    }

    doLast {
        docTempDir.mkdirs()
        def config = new groovy.util.ConfigObject()
        def docClassPath = new LinkedHashSet()
        registerDocumentationProject(project, config, docClassPath)
        configurations.docgen.getDependencies().withType(ProjectDependency).each {
            registerDocumentationProject(it.dependencyProject, config, docClassPath)
        }
        config.version = project.version
        config.toProperties().store(file("$docTempDir/props.properties").newWriter(),"")

        def cmdArgs = ['-workingDir', "$docTempDir", '-properties', "$docTempDir/props.properties", '-wkhtmltopdf', resolvedWkhtmltopdf,
                   '-pdfCover', pdfCover, '-pdfFooter', pdfFooter, '-pdfHeader', pdfHeader, '-pdfTocXsl', pdfTocXsl, "-htmlHeader", htmlHeader]
        if ("$pdfGenerationEnabled" == "true") cmdArgs << '-generatePdf'
        docResources.each({cmdArgs << '-resource' << it})
        fileTree("$docTempDir").include(resolvedMarkdownSources).each { cmdArgs << '-source' << "$it"}
        println "Executing DocumentGenerator with following args :\n $cmdArgs"
        docClassPath.addAll(configurations.docgenerator.resolve())
        docClassPath.addAll(configurations.runtime.resolve())
	println "DocumentGenerator classpath: $docClassPath"
        javaexec {
            classpath docClassPath
            setMain 'com.xebialabs.deployit.documentation.DocumentGenerator'
            args = cmdArgs
        }
    }
}


private def registerDocumentationProject(docProject, config, docClassPath) {
    if (docProject.hasProperty('docgen')) {
         config.putAll(docProject.docgen)
    }

    if (docProject.equals(project)) {
          docClassPath.addAll("$buildDir/classes/main")
          docClassPath.addAll("$buildDir/resources/main")
    } else {
          docClassPath.addAll(0,docProject.configurations.archives.allArtifacts.files)
          docClassPath.addAll(docProject.configurations.compile.resolve())
    }
    copyMarkdownAndResourcesToDocTemp(new File("${docProject.projectDir}/src/main/markdown"))
}

private def copyMarkdownAndResourcesToDocTemp(srcDir) {
    if (!srcDir.exists()) return
    srcDir.eachDir { dir ->
        def targetDest = docTempDir
        if (fileTree(dir).include('*.markdown').isEmpty()) {
            targetDest = new File("$docTempDir/${dir.name}")
            targetDest.mkdir()
        }
        copy { from dir; into targetDest }
    }

    copy {
        from(srcDir) {
            include '*.markdown'
        }
        into docTempDir
    }

}

