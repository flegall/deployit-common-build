commonBuildPath = hasProperty("localCommonBuildRepo") ? file(localCommonBuildRepo).toURL().toString() : 'https://github.com/xebialabs/deployit-common-build/raw/master'

docTempDir = file("${buildDir}/doc")
docCommonUrl = "${commonBuildPath}/documentation/generation"

pdfGenerationEnabled = false
pdfCover = "$docCommonUrl/pdfCover.html"
pdfFooter = "$docCommonUrl/pdfPageFooter.html"
pdfHeader = "$docCommonUrl/pdfPageHeader.html"
pdfTocXsl = "$docCommonUrl/pdfToc.xsl"
htmlHeader = "$docCommonUrl/htmlHeader.html"
docResources = ["$docCommonUrl/css.zip", "$docCommonUrl/image.zip", "$docCommonUrl/js.zip"]
resolvedWkhtmltopdf= hasProperty("wkhtmltopdf") ? wkhtmltopdf : 'wkhtmltopdf'
resolvedDocArchiveClassifier = hasProperty("docArchiveClassifier") ? docArchiveClassifier : 'doc'
resolvedDocArchiveExludes = hasProperty("docArchiveExcludes") ? docArchiveExcludes : [ ]

configurations {
    docgen
}

task documentationZip(type: Zip, dependsOn: ['doGenerateDocumentation']) {
    classifier = "$resolvedDocArchiveClassifier"
    exclude '*.markdown'
    exclude '*.properties'
    into("pdf") {
        from docTempDir
        include '*.pdf'
		if (resolvedDocArchiveExludes) {
			exclude resolvedDocArchiveExludes
		}
    }
    into("html") {
        from docTempDir
        exclude '*.pdf'
		if (resolvedDocArchiveExludes) {
			exclude resolvedDocArchiveExludes
		}
    }
}

artifacts {
    archives documentationZip
}

task doGenerateDocumentation(dependsOn: configurations.docgen) << {
	docTempDir.mkdirs()
    config = new groovy.util.ConfigObject()
    docClassPath = new LinkedHashSet()
	registerDocumentationProject(project, config, docClassPath)
    configurations.docgen.getDependencies(ProjectDependency.class).each {
		registerDocumentationProject(it.dependencyProject, config, docClassPath)
    }
    config.version = project.version
    config.toProperties().store(file("$docTempDir/props.properties").newWriter(),"")

    cmdArgs = ['-workingDir', "$docTempDir", '-properties', "$docTempDir/props.properties", '-wkhtmltopdf', resolvedWkhtmltopdf,
            '-pdfCover', pdfCover, '-pdfFooter', pdfFooter, '-pdfHeader', pdfHeader, '-pdfTocXsl', pdfTocXsl, "-htmlHeader", htmlHeader]
    if (pdfGenerationEnabled) cmdArgs << '-generatePdf'
    docResources.each({cmdArgs << '-resource' << it})

    fileTree("$docTempDir").include('*.markdown').each { cmdArgs << '-source' << "$it"}
    println "Executing DocumentGenerator with following args :\n $cmdArgs"
    docClassPath.addAll(configurations.runtime.resolve())
    javaexec {
        classpath docClassPath
        setMain 'com.xebialabs.deployit.documentation.DocumentGenerator'
        args = cmdArgs
    }
}

private def registerDocumentationProject(docProject, config, docClassPath) {
    if (docProject.hasProperty('docgen')) {
         config.putAll(docProject.docgen)
    }
	if (docProject != project) {
    	docClassPath.addAll(0,docProject.configurations.archives.allArtifactFiles.files)
    	docClassPath.addAll(docProject.configurations.compile.resolve())
	}
	copyMarkdownAndResourcesToDocTemp(new File("${docProject.projectDir}/src/main/markdown"))
}

private def copyMarkdownAndResourcesToDocTemp(srcDir) {
	if (!srcDir.exists()) return
	srcDir.eachDir { dir ->
        targetDest = docTempDir
        if (fileTree(dir).include('*.markdown').isEmpty()) {
            targetDest = new File("$docTempDir/${dir.name}")
            targetDest.mkdir()
        }
        copy { from dir; into targetDest }
    }

    copy {
        from(srcDir) {
            include '*.markdown'
        }
        into docTempDir
    }

}

