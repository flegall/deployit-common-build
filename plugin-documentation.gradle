// Common build file that makes plugins generate a ZIP with documentation

docSrcDir = 'src/main/markdown'
docTempDir = file("${buildDir}/doc-temp")
docBuildDir = file("${buildDir}/doc")
docName = "${name}-manual"
docCommonUrl = 'https://github.com/xebialabs/deployit-common-build/raw/master/documentation/common'

configurations {
	ciMarkdownGenerator
	pluginDist
}

def download(address, targetDir) {
	targetDir.mkdirs()
    def file = new FileOutputStream("${targetDir}/" + address.tokenize("/")[-1])
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}

task initPluginManual(type: Copy) {
	from "${docSrcDir}/${docName}.markdown"
	into "${docTempDir}"
}

// NOTE: this task requires subprojects to set property 'generatedCIPrefix' which instructs the
//       generated CI reference which CIs to include.
//
task appendCiReferenceToPluginManual(type: JavaExec, dependsOn: ['initPluginManual', 'jar']) {
	inputs.files file("${docTempDir}/${docName}.markdown")
	outputs.files file("${docTempDir}/${docName}.markdown")

	classpath configurations.ciMarkdownGenerator, configurations.compile, jar.archivePath
	main = 'com.xebialabs.deployit.documentation.PluginCIMarkdownGenerator'
	args = ["${docTempDir}/${docName}.markdown", this.generatedCIPrefix]
}


task markdownTxt(type: Exec, dependsOn: ['appendCiReferenceToPluginManual']) {
	inputs.files file("${docTempDir}/${docName}.markdown")
	outputs.files file("${docBuildDir}/${docName}.txt")
	
	executable = 'pandoc'
	args = ['-s', '--toc', "${docTempDir}/${docName}.markdown", '-o', "${docBuildDir}/${docName}.txt"]
}

markdownTxt.doFirst {
	docBuildDir.mkdirs()
}

task markdownHtml(type: Exec, dependsOn: ['appendCiReferenceToPluginManual']) {
	inputs.files file("${docTempDir}/${docName}.markdown")
	outputs.files file("${docBuildDir}/${docName}.html")

	executable = 'pandoc'
	args = ['-s', '-c', 'stylesheet.css', '--toc', '-B', "${docTempDir}/header.html", '-A', "${docTempDir}/footer.html", "${docTempDir}/${docName}.markdown", '-o', "$docBuildDir/${docName}.html"]
}

markdownHtml.doFirst {
	docBuildDir.mkdirs()

	download("${docCommonUrl}/html/header.html", docTempDir)
	download("${docCommonUrl}/html/footer.html", docTempDir)
	download("${docCommonUrl}/html/stylesheet.css", docBuildDir)
	download("${docCommonUrl}/html/images/body_bg.gif", file("${docBuildDir}/images"))
	download("${docCommonUrl}/html/images/logo.png", file("${docBuildDir}/images"))
}

task markdownPdf(type: Exec, dependsOn: ['appendCiReferenceToPluginManual']) {
	inputs.files file("${docTempDir}/${docName}.markdown")
	outputs.files file("${docBuildDir}/${docName}.pdf")

	executable = 'markdown2pdf'
	args = ["--template=${docTempDir}/latex.template", '--toc', "${docTempDir}/${docName}.markdown", '-o', "${docBuildDir}/${docName}.pdf"]
}

markdownPdf.doFirst {
	download("${docCommonUrl}/latex/latex.template", docTempDir)
	docBuildDir.mkdirs()
}

task markdown(dependsOn: ['markdownTxt', 'markdownHtml', 'markdownPdf'])

task buildPluginDist(type: Zip, dependsOn: ['jar', 'markdown']) {
	into('plugins') {
		from jar.archivePath
	}
	
	into("doc") {
		from docBuildDir
	}
}

dependencies {
	ciMarkdownGenerator 'com.xebialabs.deployit:documentation:3.1-alpha-SNAPSHOT'
}

artifacts {
	pluginDist buildPluginDist
}
